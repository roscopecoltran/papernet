{% define "content" %}
<link rel="import" href="/dist/excess-router/excess-router.html">
<link rel="import" href="/dist/iron-flex-layout/iron-flex-layout-classes.html">
<link rel="import" href="/dist/iron-list/iron-list.html">
<link rel="import" href="/dist/iron-pages/iron-pages.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-material/paper-material.html">
<link rel="import" href="/dist/paper-ripple/paper-ripple.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="{% url "/component/rf-api" .base.r %}">
<link rel="import" href="{% url "/component/rf-article" .base.r %}">
<link rel="import" href="{% url "/component/rf-keyboard-shortcuts" .base.r %}">

<dom-module id="rf-feed">
    <template>
		<style>
a {
	color: inherit;
}

.list-container {
    margin: 16px 0 8px;
}

.card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 8px;
    margin-bottom: 16px;
}

.article.read {
    color: #999;
}

.article .detail-wrapper .top-image {
    float: left;
    max-width: 10em;
    max-height: 6em;
    margin-right: 1em;
    margin-top: 0.3em;
    margin-bottom: 0.3em;
    border-radius: 2px;
    @apply(--shadow-elevation-2dp);
}

.article .detail-wrapper .short-description {
    max-height: 6.0em;
    line-height: 1.25em;
    word-wrap: break-word;
    text-overflow: ellipsis;
    overflow: hidden;
    font-size: 12px;
    font-weight: 200;
	@apply(--description-style);
}

.article .title-wrapper .title {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

.title {
    font-size: 1.2em;
    font-weight: 500;
    line-height: 24px;
}

.misc-info {
    padding-left: 0.5em;
    padding-top: 0.5em;
}

.list-article {
    text-decoration: none;
}

.feed-origin {
	@apply(--feed-origin-style);
}

.publish-date {
	@apply(--publish-date-style);
}
		</style>
		<style include="iron-flex"></style>
		<style include="iron-flex-alignment"></style>
		<iron-pages attr-for-selected="route" selected="[[ display ]]" on-iron-select="onFeedPagesSelect">
			<div route="feed" class="list-container">
				<iron-list items="[[ articles ]]" id="list">
					<template>
						<a href="[[ _computeArticleLink(item, 'main') ]]" class="list-article">
							<div class$="[[ _computeArticleClass(item.Read, item.Favorite) ]]" data-feed-id$="[[ item.FeedId ]]" data-article-id$="[[ item.Id ]]">
								<div class="card layout vertical">
									<div class="title-wrapper layout horizontal center">
										<paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.Favorite) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
										<span class="title" title$="[[ item.Title ]]" inner-h-t-m-l="[[ _computeArticleTitle(item.Title, item.Hit.*) ]]"></span>
									</div>
									<div class="detail-wrapper layout horizontal center">
										<span class="short-description flex">
											<img src$="[[ item.Thumbnail ]]" class="top-image">
											<span inner-h-t-m-l="[[ _computeArticleDescription(item.Description, item.Hit.*) ]]"></span>
											<br style="clear: both">
										</span>
									</div>
									<span class="misc-info layout horizontal center">
										<span class="feed-origin" title$="[[ item.FeedOrigin ]]" hidden$="[[ !item.FeedOrigin ]]">[[ item.FeedOrigin ]]</span>
										<span class="publish-date">[[ item.RelativeDate ]]</span>
									</span>
									<!-- allow the inner elements to receiver pointer events -->
									<paper-ripple style="pointer-events: none;"></paper-ripple>
								</div>
							</div>
						</a>
					</template>
				</iron-list>
			</div>
			<rf-article route="article" user="[[ user ]]" id="article" narrow="[[ narrow ]]" articles="[[ articles ]]" on-change-article-id="onChangeArticleId">
				<template>
					<div class="article-detail" data-article-id$="[[ item.article.Id ]]">
						<div class="card layout vertical">
							<a class="article-header-anchor article-anchor title-wrapper" href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item.article) ]]" on-click="onArticleOpen">
								<paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.article.Favorite) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
								<span class="title" title$="[[ item.article.Title ]]">[[ item.article.Title ]]</span>
								<small class="index">[[ item.ordinalPosition ]]</small>
							</a>
							<div class="misc-info layout horizontal center">
								<span class="feed-origin" title$="[[ item.article.FeedOrigin ]]" hidden$="[[ !item.article.FeedOrigin ]]">[[ item.article.FeedOrigin ]]</span>
								<span class="publish-date">[[ item.article.RelativeDate ]]</span>
							</div>
							<div class="article-content">
								<div class="article-description" hidden$="[[ item.article.summarized ]]"></div>

								<div hidden$="[[ !item.article.summarized ]]">
									<div class="article-top-image" hidden$="[[ !item.article.topImage ]]">
										<img src$="[[ item.article.topImage ]]">
									</div>
									<ul class="article-summary">
										<template is="dom-repeat" as="point" items="[[ item.article.keyPoints ]]">
											<li>[[ point ]]</li>
										</template>
									</ul>
								</div>

								<div class="article-buttons layout horizontal">
									<a href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item.article) ]]" class="article-link flex article-control article-anchor" on-click="onArticleOpen">
										{% __ "View" .base.lang %}
										<paper-ripple></paper-ripple>
									</a>
									<paper-spinner active="[[ item.article.summarizing ]]"></paper-spinner>
									<paper-material elevation="[[ _computeElevationFormattingButtons(item.article, 'summary', item.article.*) ]]">
										<a href="[[ _computeArticleLink(item.article, 'summary', item.article.*) ]]" class="article-link article-control">
											{% __ "Summarize" .base.lang %}
											<paper-ripple></paper-ripple>
										</a>
									</paper-material>
									<paper-spinner active="[[ item.article.formatting ]]"></paper-spinner>
									<paper-material elevation="[[ _computeElevationFormattingButtons(item.article, 'format', item.article.*) ]]">
										<a href="[[ _computeArticleLink(item.article, 'format', item.article.*) ]]" class="article-link article-control">
											{% __ "Format" .base.lang %}
											<paper-ripple></paper-ripple>
										</a>
									</paper-material>
								</div>
							</div>
						</div>
					</div>
				</template>
			</rf-article>
		</iron-pages>
        
        <rf-api id="article-read" method="article-read-state" tag="content-list" on-rf-api-message="onArticleStateMessage"></rf-api>
        <rf-api id="article-favorite" method="article-favorite-state" tag="content-list"on-rf-api-message="onArticleStateMessage"></rf-api>
        <rf-api id="article-format" method="format-article" on-rf-api-message="onArticleFormatMessage"></rf-api>

        <rf-keyboard-shortcut route-name="article" key-code="86, 118" label="v" description="Open the article's link in a new tab" on-press="onOpenArticleLink"></rf-keyboard-shortcut>
        <rf-keyboard-shortcut route-name="article" key-code="77, 109" label="m" description="Toggle the read state of the article" on-press="onToggleArticleState" data-type="read"></rf-keyboard-shortcut>
        <rf-keyboard-shortcut route-name="article" key-code="70, 102" label="f" description="Toggle the favorite state of the article" on-press="onToggleArticleState" data-type="favorite"></rf-keyboard-shortcut>
        <rf-keyboard-shortcut route-name="article" key-code="83, 115" label="s" description="Summarize the article" on-press="onToggleArticleFormat" data-type="summary"></rf-keyboard-shortcut>
        <rf-keyboard-shortcut route-name="article" key-code="67, 99" label="c" description="Format the article's content" on-press="onToggleArticleFormat" data-type="format"></rf-keyboard-shortcut>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-feed",
            behaviors: [
				RouteBehavior,
            ],
            properties: {
                tagOrId: String,
				articleId: {
					type: Number,
					observer: '_articleIdChanged',
				},
				formatType: {
					type: String,
					observer: '_formatTypeChanged',
				},
				display: String,
                user: Object,
                feeds: Object,
                articles: Array,
                narrow: Boolean,
            },
            observers: [
                '_articlesChanged(articles.*)',
            ],
            _tagStripper: document.createElement('div'),

            articleState: function(articleId, state) {
                var index = this.articles.find(articleId);

                if ('Read' in state) {
                    this.$['article-read'].send({id: articleId - 0, value: state.Read});
                }

                if ('Favorite' in state) {
                    this.$['article-favorite'].send({id: articleId - 0, value: state.Favorite});
                }
            },

            preArticlesUpdate: function(inserts, stateChange) {
                this._preUpdateFirstVisibleIndex = this.$.list.firstVisibleIndex;
            },

            attached: function() {
                this._relativeDateWorker = new Worker('/js/relative-date-worker.js');
                this._relativeDateWorker.addEventListener('message', this._handleRelativeDateWorkerMessage.bind(this));

                // Find the scroller that will be used by the list
                var el = Polymer.dom(this);
                while (el = (el.parentNode || el.host)) {
                    if ('scroller' in el) {
                        this._scroller = this.$.list.scrollTarget = el.scroller;
                        break;
                    }
                }

                this._updateRelativeDateInterval = setInterval(function() {
                    this._updateRelativeDates();
                }.bind(this), 60000);
            },

			detached: function() {
				clearInterval(this._updateRelativeDateInterval);
			},

			onFeedPagesSelect: function(event) {
				if (!this._scroller) {
					return;
				}

				if (this.display == 'article') {
					this._scroller.scrollTop = 0;
					this.$.article.selectedId = this.articleId - 0;
					this.$.list.scrollTarget = null;
				} else {
					this.$.article.selectedId = 0;
					this.$.list.scrollTarget = this._scroller;

					var index = this.articles.findIndex(this.articleId);
					if (index != -1) {
						this.async(function() {
							this.$.list.scrollToIndex(index);
						});
					}
				}
			},

            onArticleStateMessage: function(event, data) {
                var index = this.articles.findIndex(data.arguments.Id);
                if (index != -1) {
                    var type, args = {};
                    if ('Read' in data.arguments) {
                        type = 'Read';
                    } else if ('Favorite' in data.arguments) {
                        type = 'Favorite';
                    } else {
                        return;
                    }

                    args[type] = data.arguments[type];
                    this.set("articles." + index + "." + type, data.arguments[type]);
                    this.fire('feed-article-state', args);
                }
            },

            onArticleFormatMessage: function(event, data) {
                var index = this.articles.findIndex(data.arguments.Id),
                    article = this.articles[index];

                this.set("articles." + index + ".formattedDescription", data.arguments.Content);
                this.set("articles." + index + ".keyPoints", data.arguments.KeyPoints);
                this.set("articles." + index + ".topImage", data.arguments.TopImage);

                if (article.summarizing) {
                    this.set("articles." + index + ".summarizing", false);
                    this.set("articles." + index + ".summarized", true);
                }

                if (article.formatting) {
                    this.set("articles." + index + ".formatting", false);
                    this.set("articles." + index + ".formatted", true);
                }
            },

			onChangeArticleId: function(event, data) {
				Excess.RouteManager.transitionTo('@article', {tagOrId: this.tagOrId, articleId: data});
			},

            onFavoriteToggle: function(event) {
                event.preventDefault();
                event.stopPropagation();

                var el = Polymer.dom(event).localTarget, articleId = null;

                while (el = el.parentNode) {
                    if (el.matches('[data-article-id]')) {
                        articleId = el.dataset.articleId;
                        break;
                    }
                }

                if (articleId !== null) {
                    this.articleState(articleId,
                        {Favorite: !this.articles.find(articleId).Favorite});
                }
            },

			onArticleOpen: function(event) {
                var el = Polymer.dom(event).localTarget, link, target;

                do {
					if (el.matches("a.article-anchor")) {
						link = el.href;
						target = el.target;
                        break;
                    }
                } while (el = el.parentNode);

				if (!link) {
					return;
				}

				this._tryOpenArticleLink(link, target);
			},

            onOpenArticleLink: function() {
                var article = this.articles.find(this.articleId);
				this._tryOpenArticleLink(article.Link, this._computeArticleTarget(article));
            },

            onToggleArticleState: function(event) {
				switch (event.target.dataset['type']) {
				case "read":
					var options = {Read: !this.articles.find(this.articleId).Read};
					break;
				case "favorite":
					var options = {Favorite: !this.articles.find(this.articleId).Favorite};
					break;
				default:
					throw new Error("unknown type " + event.target.dataset['type']);
				}

                this.articleState(this.articleId, options);
            },

            onToggleArticleFormat: function(event) {
				var type = event.target.dataset['type'],
				    article = this.articles.find(this.articleId),
					options = {
						tagOrId: this.tagOrId,
						articleId: this.articleId,
					};

				if ((type == 'summary' && !article.summarized) ||
						(type == 'format' && !article.formatted)) {
					options.formatType = type;
				}

				Excess.RouteManager.transitionTo('@article', options);
            },

			_tryOpenArticleLink: function(link, target) {
				var pre = Polymer.Base.fire("pre-article-open", {link: link, target: target},
						{node: document.body, cancelable: true});
				if (pre.defaultPrevented) {
					event.preventDefault();
					return;
				}

                window.open(link, target);
			},

			_articleIdChanged: function(id, old) {
				if (!this._scroller) {
					return;
				}

				var prevIndex = this.articles.findIndex(old),
					index = this.articles.findIndex(id);

				if (prevIndex != -1) {
					var article = this.articles[prevIndex];
					if (article.summarized) {
						this.set('articles.' + prevIndex + '.summarized', false);
					}

					if (article.formatted) {
						this.set('articles.' + prevIndex + '.formatted', false);
					}
				}

				if (index === -1) {
					this.$.article.selectedId = 0;

					this.async(function() {
						Excess.RouteManager.transitionTo('@feed', {tagOrId: this.tagOrId});
					});
				} else {
					this._showArticle(id);
				}
			},

			_formatTypeChanged: function(type, old) {
				var index = this.articles.findIndex(this.articleId),
					article = this.articles[index];

				if (index == -1) {
					if (this.articles.length == 0) {
						// Still waiting for the articles to arrive
						this._repeatFormatTypeChange = true;
					}
					return;
				}

				switch (type) {
					case "format":
						this.set('articles.' + index + '.summarized', false);
						if (article.formatted || article.formattedDescription) {
							this.set('articles.' + index + '.formatted', !article.formatted);
							return;
						}

						if (!article.formatted && !article.formatting) {
							this.set('articles.' + index + '.formatting', true);
							this.$['article-format'].send({id: this.articleId - 0});
						}
						break;
					case "summary":
						this.set('articles.' + index + '.formatted', false);
						if (article.summarized || article.keyPoints) {
							this.set('articles.' + index + '.summarized', !article.summarized);
							return;
						}

						if (!article.summarized && !article.summarizing) {
							this.set('articles.' + index + '.summarizing', true);
							this.$['article-format'].send({id: this.articleId - 0});
						}
						break;
					case null:
						break;
					default:
						this.set('articles.' + index + '.formatted', false);
						this.set('articles.' + index + '.summarized', false);
				}
			},

            _articlesChanged: function(record) {
                if (!record.base.length) {
                    this.$.article.selectedId = 0;
                } else if (record.path == 'articles.splices') {
					var newIndex = this._preUpdateFirstVisibleIndex,
						originalIndex = newIndex, changeCount = 0,
						newList = false;

					for (var i = 0, s; s = record.value.indexSplices[i]; ++i) {
						if (s.index <= originalIndex) {
							changeCount += s.addedCount - s.removed.length;
							newIndex = newIndex + changeCount;
						}
					}

					newList = changeCount == record.base.length;

                    if (this.display == 'article') {
						if (newList) {
							this._showArticle(this.articleId);
						}
					} else {
                        this.async(function() {
                            if (newList) {
                                newIndex = 0;
                            }
                            this.$.list.scrollToIndex(newIndex);
                        });
                    }

					if (this._repeatFormatTypeChange) {
						this._repeatFormatTypeChange = false;
						this.async(function() {
							this._formatTypeChanged(this.formatType, null);
						});
					}
                }
            },

			_showArticle: function(id) {
				var index = this.articles.findIndex(id);

				this.$.article.selectedId = id - 0;

				if (!this.articles[index].Read) {
					this.$['article-read'].send({id: id - 0, value: true});
				}
			},

            _computeHideFormattingButtons: function(item, type) {
                return !this.user.capabilities.Extractor || item.article[type];
            },

			_computeElevationFormattingButtons: function(article, type) {
				if ((type == "summary" && article.summarized) ||
						(type == "format" && article.formatted)) {
					return 2;
				}

				return 0;
			},

            _computeArticleLink: function(article, type) {
				if ((type == "summary" && article.summarized) ||
						(type == "format" && article.formatted)) {
					type = "main";
				}

				var options = {tagOrId: this.tagOrId, articleId: article.Id};

				if (type != "main") {
					options.formatType = type;
				}

				return this.urlFor('@article', options);
            },


            _computeArticleClass: function(read, favorite) {
                var classList = ["article"]
                if (read) {
                    classList.push("read");
                }

                if (favorite) {
                    classList.push("favorite");
                }

                return classList.join(' ');
            },

            _computeFavoriteIcon: function(favorite) {
                return favorite ? 'bookmark' : 'bookmark-border';
            },

            _computeArticleTitle: function(title, hitRecord) {
                if (hitRecord.base.fragments && hitRecord.base.fragments.Title) {
                    this._tagStripper.innerHTML = hitRecord.base.fragments.Title.join(" &hellip; ");

                    return this._tagStripper.innerHTML;
                }

                return this._stripTags(title);
            },

            _computeArticleDescription: function(description, hitRecord) {
                if (hitRecord.base.fragments && hitRecord.base.fragments.Description) {
                    this._tagStripper.innerHTML = hitRecord.base.fragments.Description.join(" &hellip; ");

                    return this._tagStripper.innerHTML;
                }
                return this._stripTags(description);
            },

            _computeArticleTarget: function(article) {
                return "feed-article-" + article.Id;
            },

            _stripTags: function(html) {
                this._tagStripper.innerHTML = html;

                return this._tagStripper.textContent || "";
            },

            _updateRelativeDates: function() {
                if (this.tagOrId == "" || !this.articles || !this.articles.length) {
                    return;
                }

                this._relativeDateWorker.postMessage({
                    articles: [].concat(this.articles),
                    tagOrId: this.tagOrId,
                    lang: "{% .base.lang %}",
                });
            },

            _handleRelativeDateWorkerMessage: function(event) {
                if (this.tagOrId == event.data.tagOrId) {

                    var dates = event.data.dates;

                    for (var i = 0, a, d; a = this.articles[i]; ++i) {
                        d = dates[a.Id];
                        if (d) {
                            this.set("articles." + i + ".RelativeDate", d);
                        }
                    }
                }
            },

        })
    </script>
</dom-module>
{% end %}
