{% define "content" %}
<link rel="import" href="/dist/iron-flex-layout/iron-flex-layout-classes.html">
<link rel="import" href="/dist/neon-animation/animations/fade-out-animation.html">
<link rel="import" href="/dist/neon-animation/animations/scale-up-animation.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog.html">
<link rel="import" href="/dist/paper-dropdown-menu/paper-dropdown-menu.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/paper-item/paper-item.html">
<link rel="import" href="/dist/paper-menu/paper-menu.html">
<link rel="import" href="/dist/paper-ripple/paper-ripple.html">
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="{% url "/component/rf-api" .base.r %}">

<dom-module id="rf-settings-general">
    
    <template>
		<style>
paper-button {
	color: var(--text-primary-color);
}
.card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 16px;
    margin: 16px 8px 8px;
    max-width: 50em;
}
.theme-bubbles {
    margin: 8px 0;
}

.theme {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border-width: 2px;
    border-color: transparent;
    margin: 8px;
    position: relative;
    float: left;

    --iron-icon-width: 48px;
    --iron-icon-height: 48px;
}

a[data-language] {
    display: block;
    position: relative;
    padding: 16px;
    border-radius: 3px;
    color: var(--text-primary-color);
    text-decoration: none;
    min-height: 20px;
    font-size: 16px;

    @apply(--layout-horizontal);
    @apply(--layout-center);
}

.theme[data-theme="blue"] {
    background: var(--paper-blue-500);
}
.theme[data-theme="indigo"] {
    background: var(--paper-indigo-500);
}
.theme[data-theme="cyan"] {
    background: var(--paper-cyan-500);
}
.theme[data-theme="teal"] {
    background: var(--paper-teal-500);
}
.theme[data-theme="green"] {
    background: var(--paper-green-500);
}
.theme[data-theme="light-green"] {
    background: var(--paper-light-green-500);
}
.theme[data-theme="lime"] {
    background: var(--paper-lime-500);
}
.theme[data-theme="red"] {
    background: var(--paper-red-500);
}
.theme[data-theme="pink"] {
    background: var(--paper-pink-500);
}
.theme[data-theme="purple"] {
    background: var(--paper-purple-500);
}
.theme[data-theme="deep-purple"] {
    background: var(--paper-deep-purple-500);
}
.theme[data-theme="yellow"] {
    background: var(--paper-yellow-500);
}
.theme[data-theme="amber"] {
    background: var(--paper-amber-500);
}
.theme[data-theme="deep-orange"] {
    background: var(--paper-deep-orange-500);
}
.theme[data-theme="grey"] {
    background: var(--paper-grey-500);
}
.theme[data-theme="__random__"] {
    font-size: 40px;
    text-align: center;
    color: var(--paper-yellow-900);
    background: var(--paper-blue-grey-100);
}
		</style>
		<style include="iron-flex"></style>
		<style include="iron-flex-alignment"></style>
        <div class="card layout vertical start">
            <h2>
                {% __ "Personalize your feed reader" .base.lang %}
            </h2>
            <paper-input id="first-name" label="{% __ "First name" .base.lang %}" tabindex="1" value="{{ user.FirstName }}" on-bind-value-changed="onFirstNameChange"></paper-input>
            <paper-input id="last-name" label="{% __ "Last name" .base.lang %}" tabindex="2" value="{{ user.LastName }}"  on-bind-value-changed="onLastNameChange"></paper-input>
            <paper-input id="email" label="{% __ "Email" .base.lang %}" tabindex="3" type="email" value="{{ user.Email }}"  on-bind-value-changed="onEmailChange"></paper-input>
            {% if .base.langs %}
                <paper-dropdown-menu label="{% __ "Language" .base.lang %}">
                    <paper-menu class="dropdown-content">
                        {% $r := .base.r %}
                        {% range .base.langs %}
                            <a href="{% localizedUrl "/web/settings/general" . $r %}" on-tap="onLanguageSelect" data-language="{% . %}">
                                {% if eq . "en" %}
                                    {% __ "English" . %}
                                {% else %}
                                    {% __ "Bulgarian" . %}
                                {% end %}
                                <paper-ripple></paper-ripple>
                            </a>
                        {% end %}
                    </paper-menu>
                </paper-dropdown-menu>
            {% end %}

            <h3>
                {% __ "Pick your style" .base.lang %}
            </h3>
            <div class="theme-bubbles" class="layout horizontal justified">
                <div class="theme" data-theme="blue"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="indigo"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="cyan"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="teal"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="green"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="light-green"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="lime"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="red"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="pink"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="purple"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="deep-purple"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="yellow"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="amber"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="deep-orange"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="grey"><paper-ripple></paper-ripple></div>
                <div class="theme" data-theme="__random__">?<paper-ripple></paper-ripple></div>
                <br style="clear: both">
            </div>

            <paper-button on-tap="onChangePassword" class="self-end">{% __ "Change password" .base.lang %}</paper-button>
        </div>

        <paper-dialog id="set-password-dialog" on-keypress="onPasswordDialogKeypress" on-iron-overlay-closed="onPasswordDialogClosed" entry-animation="scale-up-animation" exit-animation="fade-out-animation" modal>
            <h2>{% __ "Change your password" .base.lang %}</h2>

            <div>
                <small>{% __ "A successfull change will force a re-log" .base.lang %}</small>
                <paper-input id="password" type="password" label="{% __ "Current password" .base.lang %}" tabindex="4"></paper-input>
                <paper-input id="new-password" type="password" label="{% __ "New password" .base.lang %}" tabindex="5"></paper-input>
                <paper-input id="confirm-new-password" type="password" label="{% __ "Confirm new password" .base.lang %}" tabindex="6"></paper-input>
            </div>

            <div class="buttons">
                <paper-button dialog-dismiss autofocus>{% __ "Cancel" .base.lang %}</paper-button>
                <paper-button autofocus on-click="onPasswordChangeApply">{% __ "Apply" .base.lang %}</paper-button>
            </div>
        </paper-dialog>

        <rf-api id="user-settings" method="set-user-attribute" tag="current-user"></rf-api>
        <rf-api id="password-change" method="set-user-attribute" tag="password-change" on-rf-api-message="onPasswordChangeMessage"></rf-api>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-settings-general",
            behaviors: [
                UserBehavior,
				ThemeManagerBehavior,
            ],
            properties: {
				user: {
					type: Object,
				},
            },

            attached: function() {
                Polymer.dom(this.root).querySelectorAll('.theme').forEach(function(e) {
                    e.addEventListener('tap', function(event) {
                        var theme = e.dataset.theme;

                        this.user.ProfileData.theme = theme;
                        this.$['user-settings'].send({
                            attribute: "ProfileData",
                            value: this.user.ProfileData
                        });

						this.applyTheme();
                    }.bind(this), false);
                }.bind(this));
            },

            onFirstNameChange: function(event, detail) {
                this.$['user-settings'].send({
                    attribute: "FirstName",
                    value: detail.value
                });
            },

            onLastNameChange: function(event, detail) {
                this.$['user-settings'].send({
                    attribute: "LastName",
                    value: detail.value
                });
            },

            onEmailChange: function(event, detail) {
                this.$['user-settings'].send({
                    attribute: "Email",
                    value: detail.value
                });
            },

            onLanguageSelect: function(event) {
                event.preventDefault();

                var element = Polymer.dom(event).localTarget,
                    language = element.dataset.language;

                this.user.ProfileData.language = language;
                this.$['user-settings'].send({
                    attribute: "ProfileData",
                    value: this.user.ProfileData
                });

                this.debounce('change-language', function() {
                    location.href = element.href;
                });
            },

            onChangePassword: function() {
                this.$['set-password-dialog'].open();
            },

            onPasswordDialogClosed: function() {
                ["password", "new-password", "confirm-new-password"].forEach(function(id) {
                    this.$[id].required = false;
                    this.$[id].invalid = false;
                    this.$[id].value = "";
                }.bind(this));
            },

            onPasswordDialogKeypress: function(event) {
                var target = Polymer.dom(event).localTarget,
                    code = event.keyCode || event.charCode, key = event.keyIdentifier;

                if (key == 'Enter' || code == 13) {
                    if (target === this.$.password) { 
                        this.$["new-password"].$.input.focus();
                    } else if (target === this.$["new-password"]) {
                        this.$["confirm-new-password"].$.input.focus();
                    } else if (target === this.$["confirm-new-password"]) {
                        this.onPasswordChangeApply();
                    }
                }
            },

            onPasswordChangeApply: function() {
                var invalid = false;
                ["password", "new-password", "confirm-new-password"].forEach(function(id) {
                    if (!this.$[id].value) {
                        this.$[id].required = true;
                        this.$[id].invalid = true;
                        this.$[id].value = null;
                        invalid = true;
                    } else {
                        this.$[id].invalid = false;
                    }
                }.bind(this));

                if (this.$["new-password"].value != this.$["confirm-new-password"].value) {
                    this.$["confirm-new-password"].invalid = true;
                    this.$["confirm-new-password"].errorMessage = "Make sure the new password fields match.";
                    invalid = true;
                }

                if (invalid) {
                    return;
                }

                this.$['password-change'].send({
                    attribute: "Password",
                    value: {
                        "Current": this.$.password.value,
                        "New": this.$["new-password"].value
                    }
                });

                this.$['set-password-dialog'].close()
            },

            onPasswordChangeMessage: function(event, data) {
                if (data.success) {
                    this.logout();
                }
            },

        })
    </script>
</dom-module>
{% end %}
