{% define "content" %}
<link rel="import" href="/dist/iron-flex-layout/iron-flex-layout-classes.html">
<link rel="import" href="/dist/iron-signals/iron-signals.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="{% url "/component/rf-api" .base.r %}">

<dom-module id="rf-settings-manage-feeds">
    <template>
		<style>
.card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 16px;
    margin: 16px 8px 8px;
    max-width: 50em;
}
.feed-favicon {
    margin-right: 5px;
}

.feed-title {
    color: var(--text-primary-color);
    font-size: 16px;
    padding: 0 8px;
    min-width: 10em;
}

.feed {
    line-height: 16px;
}

		</style>
		<style include="iron-flex"></style>
		<style include="iron-flex-alignment"></style>
        <div class="card layout vertical start">
            <div hidden$="[[ _computeHideEmptyMessage(feeds) ]]">
                {% __ "You are not subscribed to any feeds yet" .base.lang %}
            </div>

            <ul>
                <template is="dom-repeat" items="[[ feeds ]]">
                    <li class="layout vertical feed" title="[[ item.Title ]]">
                        <div class="layout horizontal center wrap">
                            <img src="[[ _computeFavIconUrl(item) ]]" alt="favicon" class="feed-favicon">
							<a href="[[ item.Link ]]" target="_blank" class="feed-title flex">
								[[ item.Title ]]
							</a>
                            <paper-icon-button icon="warning" on-tap="onDisplayFeedErrors" hidden$="[[ _computeHideFeedErrors(item) ]]"></paper-icon-button>
                            <paper-toast text="[[ _computeToastFeedErrorsText(item) ]]"></paper-toast>
                            <paper-input value="[[ _computeFeedTags(item) ]]" on-change="onFeedTagsChange" placeholder="{% __ "Comma-separated tag list" .base.lang %}" no-label-float="true"></paper-input>
                            <paper-icon-button icon="remove" on-tap="onRemoveFeed"></paper-icon-button>
                        </div>
                    </li>
                </template>
            </ul>

			<paper-button on-tap="onExportFeeds" autofocus hidden$="[[ _computeHideExportFeeds(feeds, exporting) ]]" class="self-end">{% __ "Export feeds" .base.lang %}</paper-button>
        </div>

        <rf-api id="list-feeds" method="list-feeds" tag="settings" on-rf-api-message="onAllFeedsMessage"></rf-api>
        <rf-api id="set-feed-tags" method="set-feed-tags" on-rf-api-message="onSetFeedTagsMessage"></rf-api>
        <rf-api id="remove-feed" method="remove-feed" on-rf-api-message="onRemoveFeedMessage"></rf-api>
        <rf-api id="export-opml" method="export-opml" on-rf-api-message="onExportOPMLMessage"></rf-api>

		<a id="opml-downloader" hidden download="feeds.opml"></a>

        <iron-signals on-iron-signal-rf-feeds-added="onSignalFeedsAdded"></iron-signals>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-settings-manage-feeds",
            properties: {
                user: Object,
                feeds: Array,
				exporting: Boolean,
            },
            _urlParser: document.createElement('a'),

            attached: function() {
                this.$['list-feeds'].send();
            },

			onExportFeeds: function() {
				this.exporting = true;
				this.$['export-opml'].send();
			},

            onAllFeedsMessage: function(event, detail) {
                this.feeds = detail.arguments.Feeds;
            },

            onDisplayFeedErrors: function(event) {
                var element = event.target;
                while (element.nodeName.toLowerCase() != "paper-icon-button") {
                    element = element.parentNode;
                }

                element.parentNode.querySelector('paper-toast').toggle();
            },

            onFeedTagsChange: function(event, detail, sender) {
                if (typeof event.target.value != "string") {
                    return;
                }

                var tags = event.target.value.split(/\s*,\s*/);

                event.model.item.Tags = tags;

                this.$['set-feed-tags'].send({id: event.model.item.Id, tags: tags});
            },

            onSetFeedTagsMessage: function(event, data) {
                var feed = this.feeds.filter(function(feed) {
                    if (feed.Id == data.arguments.Id) {
                        return feed;
                    }
                })[0];
                this.fire('iron-signal', {name: 'rf-feed-tags-changed', data: feed});
            },

            onRemoveFeed: function(event, detail) {
                this.$['remove-feed'].send({id: event.model.item.Id});
            },

            onRemoveFeedMessage: function(event, data) {
                this.$['list-feeds'].send();

                this.fire('iron-signal', {name: 'rf-feeds-removed'});
            },

			onExportOPMLMessage: function(event, data) {
				this.exporting = false;
				this.$['opml-downloader'].href="data:text/x-opml+xml,"+encodeURIComponent(data.arguments.opml);
				this.$['opml-downloader'].click();
			},

            onSignalFeedsAdded: function() {
                this.$['list-feeds'].send();
            },

            _computeHideEmptyMessage: function(feeds) {
                return !!feeds.length
            },

            _computeFavIconUrl: function(feed) {
                this._urlParser.href = feed.Link

                return "//www.google.com/s2/favicons?domain=" + this._urlParser.host;
            },

            _computeHideFeedErrors: function(feed) {
                return !this.user.Admin || (!feed.UpdateError && !feed.SubscribeError);
            },

            _computeHideExportFeeds: function(feeds, exporting) {
                return !feeds.length || exporting
            },

            _computeToastFeedErrorsText: function(feed) {
                return feed.UpdateError + "\n" + feed.SubscribeError;
            },

            _computeFeedTags: function(feed) {
                return feed.Tags ? feed.Tags.join(', ') : '';
            }

        })
    </script>
</dom-module>
{% end %}
