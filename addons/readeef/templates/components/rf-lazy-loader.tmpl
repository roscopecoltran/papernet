{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">

<script>
    Polymer({
        is: "rf-lazy-loader",
        properties: {
            import: String,
            element: String,
            propertyPayload: {
                type: Object,
                value: function() {
                    return {};
                },
                observer: '_onPropertyPayloadChanged',
            },
        },
        content: null,

        attached: function() {
            var parentSelector = this._findSelector();

            if (parentSelector != null) {
                if (this._isSelectedInSelector(parentSelector)) {
                    this._addContent();
                } else {
                    var cb = function(event) {
                        if (event.detail.item == this) {
                            this._addContent();
                            parentSelector.removeEventListener('iron-select', cb);
                        }
                    }.bind(this);

                    parentSelector.addEventListener('iron-select', cb);
                }
            } else {
                this._addContent();
            }
        },

        insertContent: function() {
            this.content = document.createElement(this.element);
            for (var key in this.propertyPayload) {
                this.content[key] = this.propertyPayload[key];
            }

            this.fire('rf-lazy-pre-insert', {element: this.content});

            Polymer.dom(this).innerHTML = "";
            Polymer.dom(this).appendChild(this.content);
            Polymer.dom(this).flush();

            this.fire('rf-lazy-insert', {element: this.content});
        },

        _addContent: function() {
            if (!this.element) {
                this.element = this.import.split('/').slice(-1)[0].replace('.html', '');
            }
            this.importHref(this.import, function(event) {
                this.insertContent();
            }, function(err) {
                console.error(err);
            });
        },

        _findSelector: function() {
            var selector = Polymer.dom(this).parentNode;

            if ('selected' in selector && 'items' in selector) {
                return selector;
            }

            return null;
        },

        _isSelectedInSelector: function(selector) {
            return selector.items[selector._valueToIndex(selector.selected)] == this;
        },

        _onPropertyPayloadChanged: function(newValue, oldValue) {
            if (this.content) {
                for (var key in (newValue || {})) {
                    if (this.set) {
                        this.set(key, newValue[key]);
                    } else {
                        this.content[key] = newValue[key];
                    }
                }
            }
        },
    })
</script>
{% end %}
