{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/neon-animation/web-animations.html">

<link rel="import" href="{% url "/component/rf-api" .base.r %}">

<dom-module id="rf-article">
    <template>
		<style>
#article-container {
    position: relative;
    overflow: hidden;

    -webkit-transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1);

}

#article-container.disable-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

#article-container > ::content a {
	color: inherit;
}

#article-container > ::content .index {
    font-family: "Roboto Condensed", serif;
    font-size: smaller;
    font-style: italic;
    padding-left: 0.7em;
    white-space: nowrap;
}

#article-container > ::content .article-description {
	@apply(--description-style);
}

#article-container > ::content .article-description img {
    max-width: 100%;
    height: auto;
}

#article-container > ::content .article-description .centered-block {
	display: block;
	margin: 8px auto;
}

#article-container > ::content .article-header-anchor {
    text-decoration: none;
    font-weight: 500;
    font-size: 1.2em;
}

#article-container > ::content .article-link {
    position: relative;
    margin: 0 0.29em;
    padding: 0.7em 0.57em;
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    border-radius: 3px;
}

#article-container > ::content paper-material .article-link {
	position: static;
	display: block;
	margin: 0;
}

#article-container > ::content .feed-origin {
	@apply(--feed-origin-style);
}

#article-container > ::content .publish-date {
	@apply(--publish-date-style);
}

#article-container > ::content .article-control {
    font-family: "Roboto Condensed", sans-serif;
}

#article-container > ::content .article-top-image {
    text-align: center;
}

#article-container > ::content .article-top-image img {
    width: auto;
    height: auto;
    max-width: 100%;
}

#article-container > ::content .article-summary {
    font-family: "Roboto Slab", sans-serif;
}

#article-container > ::content .card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 8px;
    margin-bottom: 16px;
}

@media(min-width: 768px) {
    #article-container > ::content .card {
        padding: 16px;
    }
}


@media(min-width: 1350px) {
    #article-container > ::content .card {
        padding: 32px;
    }
}

.article {
    width: calc(100% - 16px);
    position: absolute;
    top: 0;
    left: 0;
    margin-top: 8px;
    margin-left: 8px;
    margin-right: 8px;
    z-index: 1;
}

.article.height-provider {
    position: relative;
}

.active-article {
    z-index: 0;
}

.previous-article {
    -webkit-transform: translate3d(-105%, 0px, 0px);
    transform: translate3d(-105%, 0px, 0px);
}

.next-article {
    -webkit-transform: translate3d(105%, 0px, 0px);
    transform: translate3d(105%, 0px, 0px);
}
		</style>
        <div id="article-container" class="layout horizontal">
            <div class="article previous-article" hidden id="article-0"></div>
            <div class="article active-article height-provider" id="article-1"></div>
            <div class="article next-article" hidden id="article-2"></div>
            <content></content>
        </div>
    </template>

    {% if .base.langs %}
    <script src="/dist/moment/min/moment-with-locales.min.js"></script>
    {% end %}

    <script>
(function() {
    "use strict";

    var animations = {}, httpRe = /^https?:/, templateRe = /\{\{\s*\.\s*\}\}/;

	window.anims = animations;
    if ('webkitTransition' in document.body) {
        transitionEventName = 'webkitTransitionEnd';
        transitionProperty = 'webkitTransition';
    } else if ('msTransition' in document.body) {
        transitionEventName = 'msTransitionEnd';
        transitionProperty = 'msTransition';
    }

    if ('webkitTransform' in document.body) {
        transformPrefix = '-webkit-';
    } else if ('msTransform' in document.body) {
        transformPrefix = '-ms-';
    }

    {% if .base.langs %}
    moment.locale('{% .base.lang %}');
    {% end %}

    function ordinal(value) {
        {% if .base.langs %}
        return moment.localeData().ordinal(value);
        {% else %}
        var str = value.toString(), suff = str.slice(-1), ord = '';

        switch (suff) {
            case '1':
                ord = str.slice(-2) == '11' ? 'th' : 'st';
                break;
            case '2':
                ord = str.slice(-2) == '12' ? 'th' : 'nd';
                break;
            case '3':
                ord = str.slice(-2) == '13' ? 'th' : 'rd';
                break;
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '0':
                ord = 'th';
                break;
        }
        return value + ord;
        {% end %}
    }

    function slideFromTop(element) {
		animations[element.id] = element.animate([
            {opacity: 0.3, transform: "translate3d(0px, -105%, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});
    }

    function slideFromLeft(left, active, cb) {
        left.removeAttribute('hidden');

        animations[left.id] = left.animate([
            {opacity: 0.3, transform: "translate3d(-105%, 0px, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'forwards'});

        animations[active.id] = active.animate([
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
            {opacity: 0.3, transform: "translate3d(105%, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'forwards'});

		animations[active.id].onfinish = cb;
    }

    function slideFromRight(active, right, cb) {
        right.removeAttribute('hidden');

		animations[right.id] = right.animate([
            {opacity: 0.3, transform: "translate3d(105%, 0px, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'forwards'});

        animations[active.id] = active.animate([
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
            {opacity: 0.3, transform: "translate3d(-105%, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'forwards'});

		animations[active.id].onfinish = cb;
    }

	function stopRunningAnimations() {
		var hadRunning = false;

		for (var key in animations) {
			if (animations[key].playState == 'running') {
				hadRunning = true;
				animations[key].finish();
			}
			animations[key].cancel();
			delete animations[key];
		}

		return hadRunning;
	}

    function responsiveIframe(iframe) {
        var ratio = iframe.width && iframe.height ?
            iframe.height / iframe.width * 100 :
            9 / 16 * 100
        var container = document.createElement('div');
        container.style.position = 'relative';
        container.style.paddingBottom = ratio + '%';
        container.style.paddingTop = '35px';
        container.style.height = 0;
        container.style.overflow = 'hidden';

        iframe.style.position = 'absolute';
        iframe.style.top = 0;
        iframe.style.left = 0;
        iframe.style.width = '100%';
        iframe.style.height = '100%';

        if (iframe.parentNode.style.width) {
            iframe.parentNode.style.width = 'auto';
        }

        iframe.parentNode.insertBefore(container, iframe);
        container.appendChild(iframe);
    }

    function onImageReady(image, cb) {
        if (image.complete) {
            cb.call(image);
        } else {
            image.addEventListener('load', cb);
        }
    }

    function isSingleImage(element) {
        if (element.nextElementSibling || element.previousElementSibling) {
            return false;
        }

        if (element.parentNode && element.parentNode.textContent.trim() != "") {
            return false
        }

        return true;
    }

    Polymer({
        is: "rf-article",
        behaviors: [
            Polymer.Templatizer
        ],
        properties: {
            user: Object,
            narrow: {
                type: Boolean,
                reflectToAttribute: true,
            },
            selectedId: {
                type: Number,
                observer: '_selectedIdChanged',
                value: 0,
            },
            articles: Array,
        },
        observers: [
            '_articlesChanged(articles.*)'
        ],
        listeners: {
            'track': 'onTrack',
        },

        created: function() {
            this.setScrollDirection('y');
        },

        ready: function() {
			this._instances = this._createPool();
        },

        onTrack: function(event) {
            switch (event.detail.state) {
                case 'start':
                    this._trackState = {
                        dragStart: false,
                        ignoreTrack: false,
                        previousDx: 0,
                        previous: Polymer.dom(this.root).querySelector('.previous-article'),
                        active: Polymer.dom(this.root).querySelector('.active-article'),
                        next: Polymer.dom(this.root).querySelector('.next-article'),
                        containerWidth: this.$['article-container'].offsetWidth,
                    };
                    break;
                case 'track':
                    if (this._trackState.ignoreTrack) {
                        return;
                    }

                    var dx = event.detail.dx, dy = event.detail.dy,
                        absDx = Math.abs(dx), absDy = Math.abs(dy);

                    if (!this._trackState.dragStart &&
                            absDx > 4 && absDy > absDx * 0.5) {
                        this._trackState.ignoreTrack = true;
                        return;
                    }

                    var now = new Date().getTime();

                    if (!this._trackState.dragStart && absDx > 10) {
                        this._trackState.dragStart = true;
                        this._trackState.previous.removeAttribute('hidden');
                        this._trackState.next.removeAttribute('hidden');
                        this.$['article-container'].classList.add('disable-select');
                    }

                    if (!this._trackState.dragStart) {
                        return;
                    }

                    var distance = dx - this._trackState.previousDx;
                    if (distance == 0) {
                        return;
                    }

                    if (!this._trackState.dragStartTime || this._trackState.direction != (distance > 0 ? 1 : -1)) {
                        this._trackState.dragStartTime = now;
                        this._trackState.previousTick = now;
                        this._trackState.previousV = 0;
                        this._trackState.direction = distance > 0 ? 1 : -1;
                    }

                    var index = this.articles.findIndex(this.selectedId);
                    if (((index < this.articles.length - 1 && dx < 0) || (index > 0 && dx > 0)) && absDx < this._trackState.containerWidth) {
                        var tD = now - this._trackState.dragStartTime,
                            d = now - this._trackState.previousTick;

                        if (d > 0) {
                            var v = Math.abs(distance) / d,
                                a = Math.abs(v - this._trackState.previousV) / tD;

                            this._trackState.v = v;
                            this._trackState.a = a;

                            this.translate3d(dx + 'px', 0, 0, this._trackState.active);
                            this.translate3d(dx - this._trackState.containerWidth + 'px', 0, 0, this._trackState.previous);
                            this.translate3d(dx + this._trackState.containerWidth + 'px', 0, 0, this._trackState.next);
                        }
                    }

                    this._trackState.previousDx = dx;
                    this._trackState.previousTick = now;
                    break;
                case 'end':
                    if (!this._trackState.dragStart) {
                        return;
                    }

                    var direction = this._trackState.direction,
                        ratio = Math.abs(this._trackState.previousDx) / this._trackState.containerWidth,
                        index = this.articles.findIndex(this.selectedId);

                    if ((index == 0 && direction > 0) || (index == this.articles.length - 1 && direction < 0)) {
                        return;
                    }
                    if (this._trackState.a > 0.001 || ratio > 0.6) {
                        var duration, easing;

                        if (ratio > 0.6) {
                            // Sufficient distance
                            duration = 200 * (1 - ratio);
                            easing = 'ease';
                        } else {
                            // Fling
                            duration = 1.5 * (this._trackState.containerWidth - Math.abs(this._trackState.previousDx)) / this._trackState.v
                            // TODO: construct curve based on the acceleration
                            easing = 'cubic-bezier(0, 0.73, 0.27, 1)';
                        }

                        if (direction > 0) {
							animations[this._trackState.previous.id] =
								this._trackState.previous.animate([
									{transform: "translate3d(" + (this._trackState.previousDx - this._trackState.containerWidth) + "px, 0px, 0px)"},
									{transform: "translate3d(0px, 0px, 0px)"},
								], {duration: duration, easing: easing, fill: 'forwards'});
                        }
                        if (direction < 0) {
							animations[this._trackState.next.id] =
								this._trackState.next.animate([
									{transform: "translate3d(" + (this._trackState.previousDx + this._trackState.containerWidth) + "px, 0px, 0px)"},
									{transform: "translate3d(0px, 0px, 0px)"},
								], {duration: duration, easing: easing, fill: 'forwards'});
                        }
						animations[this._trackState.active.id] =
							this._trackState.active.animate([
								{transform: "translate3d(" + this._trackState.previousDx + "px, 0px, 0px)"},
								{transform: "translate3d(" + (direction > 0 ? '' : '-') + "105%, 0px, 0px)"},
							], {duration: duration, easing: easing, fill: 'forwards'});
						
						animations[this._trackState.active.id].onfinish = function() {
                            this.async(function() {
								this._trackState.previous.removeAttribute('style');
								this._trackState.active.removeAttribute('style');
								this._trackState.next.removeAttribute('style');

								stopRunningAnimations();

								if (direction > 0) {
									this.translate3d(0, 0, 0, this._trackState.previous);

									this._trackState.selectedId = this.articles[index - 1].Id;
								} else {
									this.translate3d(0, 0, 0, this._trackState.next);

									this._trackState.selectedId = this.articles[index + 1].Id;
								}

								this.fire('change-article-id', this._trackState.selectedId);
							});
						}.bind(this);
                    } else {
						animations[this._trackState.previous.id] =
							this._trackState.previous.animate([
								{transform: "translate3d(" + (this._trackState.previousDx - this._trackState.containerWidth) + "px, 0px, 0px)"},
								{transform: "translate3d(-105%, 0px, 0px)"},
							], {duration: 200, fill: 'forwards'});
						animations[this._trackState.next.id] =
							this._trackState.next.animate([
								{transform: "translate3d(" + (this._trackState.previousDx + this._trackState.containerWidth) + "px, 0px, 0px)"},
								{transform: "translate3d(105%, 0px, 0px)"},
							], {duration: 200, fill: 'forwards'});
						animations[this._trackState.active.id] =
							this._trackState.active.animate([
								{transform: "translate3d(" + this._trackState.previousDx + "px, 0px, 0px)"},
								{transform: "translate3d(0px, 0px, 0px)"},
							], {duration: 200, fill: 'forwards'});

						animations[this._trackState.active.id].onfinish = function() {
							this.async(function() {
								this._trackState.previous.removeAttribute('style');
								this._trackState.active.removeAttribute('style');
								this._trackState.next.removeAttribute('style');

								this._trackState.previous.setAttribute('hidden', '');
								this._trackState.next.setAttribute('hidden', '');

								stopRunningAnimations();
							});
						}.bind(this);
                    }

                    this.$['article-container'].classList.remove('disable-select');
                    break;
            }
        },

        _selectedIdChanged: function(id, oldValue) {
            if (!id) {
                return;
            }

			if (stopRunningAnimations() && oldValue) {
				this._render(oldValue);
			}

            var index = this.articles.findIndex(id),
                oldIndex = this.articles.findIndex(oldValue),
                direction = 0;

            if (oldIndex != -1) {
                if (oldIndex == index - 1) {
                    direction = 1;
                } else if (oldIndex == index + 1) {
                    direction = -1;
                }
            }

			var elements = [
                Polymer.dom(this.root).querySelector('.previous-article'),
                Polymer.dom(this.root).querySelector('.active-article'),
                Polymer.dom(this.root).querySelector('.next-article'),
            ];
            if (direction === 0) {
				this._render(id);
				slideFromTop(elements[1]);
            } else {
                if (this._trackState && id == this._trackState.selectedId) {
                    this._debounceTemplate(function() { this._render(id) });
                } else if (direction === 1) {
                    slideFromRight(elements[1], elements[2], function() { this._render(id) }.bind(this));
                } else {
                    slideFromLeft(elements[0], elements[1], function() { this._render(id) }.bind(this));
                }
            }
        },

        _articlesChanged: function(record) {
            if (!this.selectedId) {
                return;
            }

            var parts = record.path.split('.'), article;
            if (parts.length == 3 && parts[0] == "articles" && /#\d+/.test(parts[1])) {
                parts = parts.splice(1);
                parts.splice(1, 0, 'article')
                this._forwardItemPath(parts.join('.'), record.value);
            } else if (parts.length == 2 && parts[1] == 'splices') {
                var index = this.articles.findIndex(this.selectedId),
                    needsUpdate = false;

                for (var i = 0, s; s = record.value.indexSplices[i]; ++i) {
                    if (s.index <= index + 1) {
                        needsUpdate = true;
                        break;
                    }
                }

                if (!needsUpdate) {
                    return;
                }

                [-1, 0, 1].forEach(function(i) {
                    var localIndex = index + i,
						article = this.articles[localIndex],
                        key = Polymer.Collection.get(this.articles).getKey(article);

                    if (localIndex == -1) {
                        return;
                    }

					if (!this._instances[i+1]._templateInstance.item ||
							this._instances[i+1]._templateInstance.item.article.Id != article.Id) {
						this._assignModel(index, i);
					}

                    if (!this._instances[i + 1].hasAttribute('unused')) {
						this._forwardItemPath(key + '.index', localIndex);
						this._forwardItemPath(key + '.ordinalPosition', ordinal(localIndex + 1));
                    }
                }.bind(this));
            }
        },

        _render: function(activeId) {
            var active = Polymer.dom(this.root).querySelector('.active-article'),
                previous = Polymer.dom(this.root).querySelector('.previous-article'),
                next = Polymer.dom(this.root).querySelector('.next-article'),
                index = this.articles.findIndex(activeId),
                direction = 0;

            if (this._instanceId(-1) == activeId) {
                direction = -1;
            } else if (this._instanceId(1) == activeId) {
                direction = 1;
            }

            // Shift the instances when the selection moves to the left or right
            if (direction === 1) {
                active.classList.remove('active-article');
                active.classList.add('previous-article');

                next.classList.remove('next-article');
                next.classList.add('active-article');

                previous.classList.remove('previous-article');
                previous.classList.add('next-article');

				var temp = this._instances[0];
                this._instances[0] = this._instances[1];
                this._instances[1] = this._instances[2];
                this._instances[2] = temp;
            } else if (direction === -1) {
                active.classList.remove('active-article');
                active.classList.add('next-article');

                previous.classList.remove('previous-article');
                previous.classList.add('active-article');

                next.classList.remove('next-article');
                next.classList.add('previous-article');

				var temp = this._instances[2];
                this._instances[2] = this._instances[1];
                this._instances[1] = this._instances[0];
                this._instances[0] = temp;
            }

			if (direction !== 1 && index > 0) {
                this._assignModel(index, -1);
            }

			if (direction !== -1 && index < this.articles.length - 1) {
                this._assignModel(index, 1);
            }

            if (direction !== 1 && direction !== -1) {
                this._assignModel(index, 0);
            }

            this.cancelDebouncer('container-clear-height');
            this.$['article-container'].style.height = '';
            var oldHeight = window.getComputedStyle(this.$['article-container']).getPropertyValue('height');

            ['previous-article', 'active-article', 'next-article'].forEach(function(cls) {
                var el = Polymer.dom(this.root).querySelector('.' + cls);
                el.removeAttribute('style');
                if (cls == 'active-article') {
                    el.classList.add('height-provider');
                    el.removeAttribute('hidden');
                } else {
                    el.classList.remove('height-provider');
                    el.setAttribute('hidden', '');
                }
            }.bind(this));

			stopRunningAnimations();

            var newHeight = window.getComputedStyle(this.$['article-container']).getPropertyValue('height');
            if (oldHeight != newHeight) {
                this.$['article-container'].style.height = oldHeight;
                this.$['article-container'].offsetHeight;

                this.$['article-container'].style.height = newHeight;
                this.debounce('container-clear-height', function() {
                    this.$['article-container'].style.height = '';
                }, 1000);
            }

            Polymer.dom.flush();
        },

        _stylizeArticleDescription: function(inst, article) {
            if (article.summarized) {
                return;
            }

            var description = inst.querySelector('.article-description'),
                imageStyler = function() {
                    this.removeAttribute('style');
                    this.removeAttribute('width');
                    this.removeAttribute('height');
                    if (this.naturalWidth * this.naturalHeight < 240 * 180) {
                        var floater = this;
                        do {
                            if (!isSingleImage(floater)) {
                                break;
                            }

                            if (floater == description) {
								this.classList.add('centered-block');
                                return;
                            }
                        } while (floater = floater.parentNode);

						if (floater) {
							if (floater.parentNode && !floater.parentNode.querySelector('br[style]')) {
								var clear = document.createElement('br');
								clear.style.clear = "both";
								floater.parentNode.appendChild(clear);
							}
							floater.style.float = "right";
							floater.style.margin = "0.7em";
						}
                    } else {
						this.classList.add('centered-block');
                    }
                }, image;

            description.innerHTML = article.formatted ?
                article.formattedDescription : article.Description;

            if (article.topImage) {
                var topImage = description.querySelector('[src="' + article.topImage + '"]');
                if (topImage) {
                    topImage.parentNode.removeChild(topImage);
                }
            }

            image = description.querySelector('img');

            if (image) {
                Array.prototype.forEach.call(description.querySelectorAll('img'), function(img) {
                    onImageReady(img, imageStyler);
                });
            } else if (article.topImage) {
                var image = document.createElement('img'),
                    link = article.topImage;

                if (this.user.capabilities.ProxyHTTP && link.indexOf("http:") == 0) {
                    link = '/proxy?url=' + encodeURIComponent(link);
                }
                image.src = link;
                description.insertBefore(image, description.firstChild);
            }

            Array.prototype.forEach.call(
                description.querySelectorAll('img'),
                function(element) {
                    element.style.width = 'auto';
                    element.style.height = 'auto';
                }
            );

            Array.prototype.forEach.call(
                description.querySelectorAll('iframe, object'),
                responsiveIframe
            );

            Polymer.dom.flush();
        },

        _forwardParentProp: function(prop, value) {
            this._instances.forEach(function(inst) {
                if (inst && inst._templateInstance) {
                    inst._templateInstance[prop] = value;
                }
            }.bind(this));
        },

        _forwardParentPath: function(path, value) {
            this._instances.forEach(function(inst) {
                if (inst && inst._templateInstance) {
                    inst._templateInstance.notifyPath(path, value, true);
                }
            }, this);
        },

        _forwardItemPath: function(path, value) {
            if (this.articles.length) {
                var dot = path.indexOf('.'),
                    key = path.substring(0, dot < 0 ? path.length : dot),
                    article = Polymer.Collection.get(this.articles).getItem(key),
                    index, inst;

                if (!article) {
                    return;
                }

                index = this.articles.findIndex(article.Id);
                inst = this._instances[article.Id == this.selectedId ? 1 :
                    (this.articles[index - 1] || {}).Id == this.selectedId ? 2 :
                    (this.articles[index + 1] || {}).Id == this.selectedId ? 0 : -1];

                if (inst && inst._templateInstance) {
                    if (dot >= 0) {
                        var propName = path.substring(dot+1),
                            article = inst._templateInstance.item.article;

                        if (propName == 'article.formattedDescription' && article.formatted ||
                                propName == 'article.formatted' && article.formattedDescription) {
                            this._stylizeArticleDescription(inst, article);
                        }

						path = 'item.' + propName;
						inst._templateInstance.notifyPath(path, value, true);
                    } else {
                        inst._templateInstance.item.article = value;
                    }
                }
            }
        },

		_ensureTemplatized: function() {
			if (!this.ctor) {
				// Template instance props that should be excluded from forwarding
				var props = {};
				props.item = true;

				this._instanceProps = props;
				this._userTemplate = Polymer.dom(this).querySelector('template');

				if (this._userTemplate) {
					this.templatize(this._userTemplate);
				} else {
					console.warn('rf-article requires a template to be provided in light-dom');
				}
			}
		},

		_createPool: function() {
			var physicalItems = new Array(3),
				selectors = ['.previous-article', '.active-article', '.next-article'];

			this._ensureTemplatized();

			for (var i = 0; i < 3; i++) {
				var inst = this.stamp(null);
				// First element child is item; Safari doesn't support children[0]
				// on a doc fragment
				physicalItems[i] = inst.root.querySelector('*');
				Polymer.dom(this.root).querySelector(selectors[i]).appendChild(inst.root);
			}
			return physicalItems;
		},

		_assignModel: function(index, direction) {
			var el = this._instances[direction + 1],
				inst = el._templateInstance,
				article = this.articles[index + direction],
				model = {
					article: article,
					index: index + direction,
					ordinalPosition: ordinal(index + direction + 1),
				};

			if (article !== undefined && article !== null) {
				inst.item = model;
				el.removeAttribute('unused');

				this._stylizeArticleDescription(el, article);
			} else {
				el.setAttribute('unused', '');
			}
		},

		_instanceId: function(direction) {
			var inst = this._instances[direction + 1]
			return !inst.hasAttribute('unused') && inst._templateInstance.item && inst._templateInstance.item.article ? inst._templateInstance.item.article.Id : -1;
		},

    });
})()
    </script>
</dom-module>
{% end %}
